
## Where the samples will be written
save_data: toy-ende/run/example

## Where the vocab(s) will be written
# src_vocab: toy-ende/run/example.vocab.src
# tgt_vocab: toy-ende/run/example.vocab.tgt

# Prevent overwriting existing files in the folder
overwrite: False

# Tokenization options
src_subword_type: sentencepiece
src_subword_model: examples/subword.spm.model
tgt_subword_type: sentencepiece
tgt_subword_model: examples/subword.spm.model

# Number of candidates for SentencePiece sampling
subword_nbest: 20
# Smoothing parameter for SentencePiece sampling
subword_alpha: 0.1
# Specific arguments for pyonmttok
src_onmttok_kwargs: "{'mode': 'none', 'spacer_annotate': True}"
tgt_onmttok_kwargs: "{'mode': 'none', 'spacer_annotate': True}"

# Transform options
reversible_tokenization: "joiner"
prior_tokenization: true

# Vocab opts
src_vocab: exp/data.vocab.src
tgt_vocab: exp/data.vocab.tgt
src_feats_vocab:
    feat_0: exp/data.vocab.feat_0
    feat_1: exp/data.vocab.feat_1
feat_merge: "sum"

# Corpus opts:
data:
    corpus_1:
        path_src: toy-ende/src-train1.txt
        path_tgt: toy-ende/tgt-train1.txt
        # src - tgt alignments in pharaoh format
        path_align: toy-ende/src-tgt.align
        src_feats:
            feat_0: data/train/data.src.feat_0
            feat_1: data/train/data.src.feat_1
        transforms: [filterfeats, onmt_tokenize, inferfeats, prefix]
        src_prefix: __some_src_prefix__
        tgt_prefix: __some_tgt_prefix__
        weight: 7
    corpus_2:
        path_src: toy-ende/src-train1.txt
        path_tgt: toy-ende/tgt-train1.txt
        transforms: [filterfeats, onmt_tokenize, inferfeats]
        weight: 3
    valid:
        path_src: toy-ende/src-val.txt
        path_tgt: toy-ende/tgt-val.txt
        transforms: [filterfeats, onmt_tokenize, inferfeats]

# General opts
save_model: foo
save_checkpoint_steps: 10000
valid_steps: 10000
train_steps: 200000

# Batching
bucket_size: 32768
world_size: 4
gpu_ranks: [0, 1, 2, 3]
num_workers: 4
batch_type: "tokens"
batch_size: 4096
valid_batch_size: 8
max_generator_batches: 2
accum_count: [4]
accum_steps: [0]

# Optimization
model_dtype: "fp32"
optim: "adam"
learning_rate: 2
warmup_steps: 8000
decay_method: "noam"
adam_beta2: 0.998
max_grad_norm: 0
label_smoothing: 0.1
param_init: 0
param_init_glorot: true
normalization: "tokens"

# Model
encoder_type: transformer
decoder_type: transformer
position_encoding: true
enc_layers: 6
dec_layers: 6
heads: 8
hidden_size: 512
word_vec_size: 512
src_word_vec_size: 512
tgt_word_vec_size: 512
transformer_ff: 2048
dropout_steps: [0]
dropout: [0.1]
attention_dropout: [0.1]

# Embedding
# this means embeddings will be used for both encoder and decoder sides
both_embeddings: glove_dir/glove.6B.100d.txt
# to set src and tgt embeddings separately:
# src_embeddings: ...
# tgt_embeddings: ...

# supported types: GloVe, word2vec
embeddings_type: "GloVe"

# word_vec_size need to match with the pretrained embeddings dimensions
# word_vec_size: 100

freeze_word_vecs_enc: true
freeze_word_vecs_dec: true

early_stopping: 2
early_stopping_criteria: ppl

# Decoding
replace_unk: true
max_length: 250